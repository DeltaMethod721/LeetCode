class Solution {
private:
    void helper(vector<vector<int>>& result, vector<int>& current, vector<int>& candidates, int target, int start){
        // try to add a number
        for (int i = start; i < candidates.size(); ++i){
            if (i == start || candidates[i] != candidates[i - 1]){
                current.push_back(candidates[i]);
            if (candidates[i] == target){
                result.push_back(current);
            }else if(candidates[i] < target){
                helper(result, current, candidates, target - candidates[i], i + 1);
            }
                current.pop_back();
            }
        }
    }
public:
    vector<vector<int>> combinationSum2(vector<int>& candidates, int target) {
        vector<vector<int>> result;
        if (candidates.empty()) return result;
        vector<int> current;
        sort(candidates.begin(), candidates.end());
        helper(result, current, candidates, target, 0);
        return result;
    }
};