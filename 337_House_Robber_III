Method 1
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
private:
    int helper(TreeNode* node){
        // return max money rooted at node
        // rob it!
        if (node == NULL) return 0;
        int result1 = node->val, result2 = 0;
        if (node->left != NULL) result1 += helper(node->left->right) + helper(node->left->left);
        if (node->right != NULL) result1 += helper(node->right->left) + helper(node->right->right);
        result2 += helper(node->left) + helper(node->right);
        return max(result1, result2);
    }
public:
    int rob(TreeNode* root) {
        return helper(root);
    }
};

Method 2: use hashmap as dp container
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
unordered_map<TreeNode*, int> hashmap;
private:
    int helper(TreeNode* node){
        // return max money rooted at node
        // rob it!
        if (node == NULL) return 0;
        if (node->left != NULL){
            if (hashmap.find(node->left->right) == hashmap.end())
                hashmap.insert(make_pair(node->left->right, helper(node->left->right)));
            if (hashmap.find(node->left->left) == hashmap.end())
                hashmap.insert(make_pair(node->left->left, helper(node->left->left)));
        }
        if (node->right != NULL){
            if (hashmap.find(node->right->left) == hashmap.end())
                hashmap.insert(make_pair(node->right->left, helper(node->right->left)));
            if (hashmap.find(node->right->right) == hashmap.end())
                hashmap.insert(make_pair(node->right->right, helper(node->right->right)));
        }
        if (hashmap.find(node->left) == hashmap.end())
            hashmap.insert(make_pair(node->left, helper(node->left)));
        if (hashmap.find(node->right) == hashmap.end())
            hashmap.insert(make_pair(node->right, helper(node->right)));
        int result1 = node->val, result2 = 0;
        if (node->left != NULL) result1 += hashmap[node->left->right] + hashmap[node->left->left];
        if (node->right != NULL) result1 += hashmap[node->right->left] + hashmap[node->right->right];
        // don't rob
        result2 += hashmap[node->left] + hashmap[node->right];
        return max(result1, result2);
    }
public:
    int rob(TreeNode* root) {
        return helper(root);
    }
};

Method 3
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
private:
    vector<int> helper(TreeNode* node){
        // return money rooted at node: (robbed, not)
        vector<int> result (2, 0);
        if (node == NULL) return result;
        vector<int> left = helper(node->left);
        vector<int> right = helper(node->right);
        result[0] = node->val + left[1] + right[1];
        result[1] = max(left[0], left[1]) + max(right[0], right[1]);
        return result;
    }
public:
    int rob(TreeNode* root) {
        vector<int> money = helper(root);
        return max(money[0], money[1]);
    }
};