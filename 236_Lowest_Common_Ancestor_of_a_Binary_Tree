Method 1: memory exceeded
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
private:
    vector<vector<TreeNode*>> paths;
    void findpath(TreeNode* node, TreeNode* p, TreeNode* q, vector<TreeNode*> path){
        if (paths.size() == 2) return;
        path.push_back(node);
        if (node == p || node == q) paths.push_back(path);
        if (node->left != NULL) findpath(node->left, p, q, path);
        if (node->right != NULL) findpath(node->right, p, q, path);
    }
public:
    TreeNode* lowestCommonAncestor(TreeNode* root, TreeNode* p, TreeNode* q) {
        if (root == NULL) return root;
        vector<TreeNode*> path;
        findpath(root, p, q, path);
        cout << paths.size() << endl;
        cout << paths[0].size() << endl;
        cout << paths[1].size() << endl;
        for (int i = 0; i < paths[0].size() && i < paths[1].size(); ++i){
            if (paths[0][i] != paths[1][i]) return paths[0][i - 1];
        }
        return paths[0][min(paths[0].size(), paths[1].size()) - 1];
    }
};

