class Solution {
public:
    vector<string> wordSubsets(vector<string>& A, vector<string>& B) {
        vector<unordered_map<char, int>> hashmap;
        for (int i = 0; i < B.size(); ++i){
            unordered_map<char, int> temp;
            for (int j = 0; j < B[i].size(); ++j){
                if (temp.find(B[i][j]) == temp.end())
                    temp.insert(make_pair(B[i][j], 1));
                else
                    temp[B[i][j]]++;
            }
            hashmap.push_back(temp);
        }
        vector<string> result;
        for (int i = 0; i < A.size(); ++i){
            vector<unordered_map<char, int>> temp_map = hashmap;
            for (int j = 0; j < A[i].size(); ++j){
                // check if A[i][j] is in ALL hash maps
                for (int k = 0; k < temp_map.size(); ++k){
                    if (temp_map[k].find(A[i][j]) != temp_map[k].end()) temp_map[k][A[i][j]]--;
                }
            }
            // check if all hashmaps decrease to 0
            bool add = true;
            for (int k = 0; k < temp_map.size(); ++k){
                for (auto it = temp_map[k].begin(); it != temp_map[k].end(); ++it){
                    add = add & (it->second <= 0);
                }
            }
            if (add) result.push_back(A[i]);
        }
        return result;
    }
};

class Solution {
public:
    vector<string> wordSubsets(vector<string>& A, vector<string>& B) {
        unordered_map<char, int> hashmap;
        for (int i = 0; i < B.size(); ++i){
            unordered_map<char, int> temp;
            for (int j = 0; j < B[i].size(); ++j){
                if (temp.find(B[i][j]) == temp.end())
                    temp.insert(make_pair(B[i][j], 1));
                else
                    temp[B[i][j]]++;
            }
            for (auto it = temp.begin(); it != temp.end(); ++it){
                if (hashmap.find(it->first) == hashmap.end()) hashmap.insert(make_pair(it->first, it->second));
                else hashmap[it->first] = max(hashmap[it->first], it->second);
            }
        }
        vector<string> result;
        for (int i = 0; i < A.size(); ++i){
            unordered_map<char, int> temp_map = hashmap;
            for (int j = 0; j < A[i].size(); ++j){
                // check if A[i][j] is in ALL hash maps
                if (temp_map.find(A[i][j]) != temp_map.end())
                    temp_map[A[i][j]]--;
            }
            // check if all hashmaps decrease to 0
            bool add = true;
            for (auto it = temp_map.begin(); it != temp_map.end(); ++it){
                if (it->second > 0){
                    add = false; break;
                }
            }
            if (add) result.push_back(A[i]);
        }
        return result;
    }
};