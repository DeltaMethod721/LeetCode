class Solution {
private:
    vector<int> findboundary(vector<int>&nums, int target, int left, int right, int mid){
        int left1 = left, left2 = mid, right1 = mid, right2 = right, mid1, mid2;
        while (left1 <= right1){
            if (nums[left1] == target) break;
            mid1 = (right1 - left1) / 2 + left1;
            if (target == nums[mid1]){
                right1 = mid1;
            }else{
                left1 = mid1 + 1;
            }
        }
        while (left2 <= right2){
            if (nums[right2] == target) break;
            if (left2 == right2 - 1){
                right2 = left2;
                break;
            }
            mid2 = (right2 - left2) / 2 + left2;
            if (nums[mid2] == target){
                left2 = mid2;
            }else{
                right2 = mid2 - 1;
            }
        }
        return {left1, right2};
    }
public:
    vector<int> searchRange(vector<int>& nums, int target) {
        int left = 0, right = (int)nums.size() - 1, mid;
        while (left <= right){
            mid = (right - left) / 2 + left;
            if (nums[mid] > target){
                right = mid - 1;
            }else if (nums[mid] < target){
                left = mid + 1;
            }else{
                return findboundary(nums, target, left, right, mid);
            }
        }
        return {-1, -1};
    }
};