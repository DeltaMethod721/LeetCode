class Solution {
public:
    int uniquePathsWithObstacles(vector<vector<int>>& obstacleGrid) {
        int m = obstacleGrid.size(), n = obstacleGrid[0].size();
        if (obstacleGrid[0][0] == 1 || obstacleGrid[m - 1][n - 1] == 1) return 0;
        vector<vector<int>> path(m, vector<int> (n, 1));
        path[0][0] = 1 - obstacleGrid[0][0];
        for (int i = 1; i < m; i++){
            path[i][0] = path[i - 1][0] * (1 - obstacleGrid[i][0]);
        }
        for (int j = 1; j < n; j++){
            path[0][j] = path[0][j - 1] * (1 - obstacleGrid[0][j]);
        }
        for (int i = 1; i < m; i++)
            for (int j = 1; j < n; j++)
                path[i][j] = (path[i - 1][j] + path[i][j - 1]) * (1 - obstacleGrid[i][j]);
        return path[m - 1][n - 1];
    }
};