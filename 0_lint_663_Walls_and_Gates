class Solution {
private:
    int BFS(vector<vector<int>> rooms, int x, int y){
        int n_rows = rooms.size();
        int n_cols = rooms[0].size();
        queue<vector<int>> q;
        q.push({x, y});
        int depth = 0;
        vector<int> current;
        while(!q.empty()){
            int size = q.size();
            for (int i = 0; i < size; ++i){
                // get current
                current = q.front();
                q.pop();
                
                // check if current is gate, if so, return depth
                if (rooms[current[0]][current[1]] == 0) return depth;
                // if not, mark this location as visited (-2)
                rooms[current[0]][current[1]] = -2;
                // check neighbors for the next round
                if (current[0] > 0 && rooms[current[0] - 1][current[1]] != -2) q.push({current[0] - 1}, current[1]);
                if (current[1] > 0 && rooms[current[0]][current[1] - 1] != -2) q.push({current[0], current[1] - 1});
                if (current[0] <= n_rows - 2 && rooms[current[0] + 1][current[1]] != -2) q.push({current[0] + 1, current[1]});
                if (current[1] <= n_cols - 2 && rooms[current[0]][current[1] + 1] != -2) q.push({current[0], current[1] + 1});
            }
            depth++;
        }
        return pow(2, 31) - 1;
    }
public:
    /**
     * @param rooms: m x n 2D grid
     * @return: nothing
     */
    void wallsAndGates(vector<vector<int>> &rooms) {
        // write your code here
        if (rooms.empty()) return;
        int n_rows = rooms.size();
        int n_cols = rooms[0].size();
        for (int i = 0; i < n_rows; ++i){
            for (int j = 0; j < n_cols; ++j){
                if (rooms[i][j] == pow(2, 31) - 1) rooms[i][j] = BFS(rooms, i, j);
            }
        }
        return;
    }
};
