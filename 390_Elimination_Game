class Solution {
private:
    vector<int> helper(vector<int> input, int direction){
        if ((int)input.size() == 1) return input;
        vector<int> a;
        if (direction % 2 == 1){
            //left to right
            for (int i = 0; i < input.size(); ++i){
                if (i % 2 == 1) a.push_back(input[i]);
            }
        }else{
            //right to left
            for (int i = 0; i < input.size(); ++i){
                if (i % 2 == 1) a.insert(a.begin(), input[input.size() - 1 - i]);
            }
        }
        return helper(a, ++direction);
    }
public:
    int lastRemaining(int n) {
        vector<int> a;
        int i = 1;
        while (i <= n){
            a.push_back(i);
            ++i;
        }
        a = helper(a, 1);
        return a[0];
    }
};


class Solution {
private:
    int helper(int n, int level){
        // if level % 2 == 1, then reduce to helper(n / 2, ++level) * 2
        // if level % 2 == 0 and n % 2 == 0, then reduce to helper(n / 2, ++level) * 2 - 1
        if (n == 1) return 1;
        if (level % 2 == 0 && n % 2 == 0)
            return helper(n / 2, ++level) * 2 - 1;
        else
            return helper(n / 2, ++level) * 2;
    }
public:
    int lastRemaining(int n) {
        return helper(n, 1);
    }
};