class Solution {
private:
    int numSubtrees(int start, int end){
        if (start >= end) return 1;
        int result = 0;
        // chose from start to end as root:
        for (int root = start; root <= end; ++root){
            // split it into 2 parts
            result += numSubtrees(start, root - 1) * numSubtrees(root + 1, end);
        }
        return result;
    }
public:
    int numTrees(int n) {
        return numSubtrees(1, n);
    }
};


class Solution {
private:
    
public:
    int numTrees(int n) {
        if (n == 1) return 1;
        vector<int> dp (n + 1, 0);
        dp[0] = 1; dp[1] = 1;
        for (int i = 2; i <= n; ++i){
            // to figure out dp[i]
            for (int j = 1; j <= i; ++j){
                // root can be from 1 to i, cut to j-1 and i-j two parts
                dp[i] += dp[j - 1] * dp[i - j];
            }
        }
        return dp[n];
    }
};

