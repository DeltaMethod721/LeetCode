class Solution {
private: 
    void helper(vector<vector<int>>& result, vector<int> current, int start, int end, int step){
        if (step == current.size()){
            result.push_back(current);
            return;
        }
        unordered_set<int> swapped;
        for (int i = start; i < end; ++i){
            if ((i == start || current[start] != current[i]) && swapped.count(current[i]) == 0){
                swapped.insert(current[i]);
                swap(current[start], current[i]);
                helper(result, current, start + 1, end, step + 1);
                swap(current[i], current[start]);
            }
        }
        return;
    }
public:
    vector<vector<int>> permuteUnique(vector<int>& nums) {
        vector<vector<int>> result;
        vector<int> current = nums;
        if (nums.empty()) return result;
        helper(result, current, 0, nums.size(), 1);
        return result;
    }
};