BFS
20ms 16%
class Solution {
private:
    void BFS(vector<vector<char>> &board, int x, int y, char R, vector<vector<int>> &locations){
        int n_rows = board.size();
        int n_cols = board[0].size();
        queue<vector<int>> q;
        vector<int> current;
        // initialization
        q.push({x, y});
        while(!q.empty()){
            int size = q.size();
            for (int i = 0; i < size; ++i){
                // get current
                current = q.front();
                q.pop();
                // check if it is 'O'
                if (board[current[0]][current[1]] == 'O'){
                    board[current[0]][current[1]] = R;
                    locations.push_back(current);
                    // check neighbors
                    if (current[0] > 0 && board[current[0] - 1][current[1]] == 'O') q.push({current[0] - 1, current[1]});
                    if (current[1] > 0 && board[current[0]][current[1] - 1] == 'O') q.push({current[0], current[1] - 1});
                    if (current[0] <= n_rows - 2 && board[current[0] + 1][current[1]] == 'O') q.push({current[0] + 1, current[1]});
                    if (current[1] <= n_cols - 2 && board[current[0]][current[1] + 1] == 'O') q.push({current[0], current[1] + 1});
                    
                }
            }
        }
        return;
    }
public:
    void solve(vector<vector<char>>& board) {
        if (board.empty()) return;
        int n_rows = board.size();
        int n_cols = board[0].size();
        if (n_rows <= 2 || n_cols <= 2) return;
        // flip all boarder regions to "A", keep it in a space
        vector<vector<int>> locations, temp;
        // top & bottom
        for (int i = 0; i < n_cols; ++i){
            if (board[0][i] == 'O') BFS(board, 0, i, 'A', locations);
            if (board[n_rows - 1][i] == 'O') BFS(board, n_rows - 1, i, 'A', locations);
        }
        // left & right
        for (int i = 0; i < n_rows; ++i){
            if (board[i][0] == 'O') BFS(board, i, 0, 'A', locations);
            if (board[i][n_cols - 1] == 'O') BFS(board, i, n_cols - 1, 'A', locations);
        }
        // filp center
        for (int i = 1; i < n_rows - 1; ++i){
            for (int j = 1; j < n_cols - 1; ++j){
                if (board[i][j] == 'O') BFS(board, i, j, 'X', temp);
            }
        }
        // flip 'A's back
        for (int i = 0; i < locations.size(); ++i){
            board[locations[i][0]][locations[i][1]] = 'O';
        }
        return;
    }
};


BFS
not searching for center
8ms over 90%
class Solution {
private:
    void BFS(vector<vector<char>> &board, int x, int y, char R, vector<vector<int>> &locations){
        int n_rows = board.size();
        int n_cols = board[0].size();
        queue<vector<int>> q;
        vector<int> current;
        // initialization
        q.push({x, y});
        while(!q.empty()){
            int size = q.size();
            for (int i = 0; i < size; ++i){
                // get current
                current = q.front();
                q.pop();
                // check if it is 'O'
                if (board[current[0]][current[1]] == 'O'){
                    board[current[0]][current[1]] = R;
                    locations.push_back(current);
                    // check neighbors
                    if (current[0] > 0 && board[current[0] - 1][current[1]] == 'O') q.push({current[0] - 1, current[1]});
                    if (current[1] > 0 && board[current[0]][current[1] - 1] == 'O') q.push({current[0], current[1] - 1});
                    if (current[0] <= n_rows - 2 && board[current[0] + 1][current[1]] == 'O') q.push({current[0] + 1, current[1]});
                    if (current[1] <= n_cols - 2 && board[current[0]][current[1] + 1] == 'O') q.push({current[0], current[1] + 1});
                    
                }
            }
        }
        return;
    }
public:
    void solve(vector<vector<char>>& board) {
        if (board.empty()) return;
        int n_rows = board.size();
        int n_cols = board[0].size();
        if (n_rows <= 2 || n_cols <= 2) return;
        // flip all boarder regions to "A", keep it in a space
        vector<vector<int>> locations;
        // top & bottom
        for (int i = 0; i < n_cols; ++i){
            if (board[0][i] == 'O') BFS(board, 0, i, 'A', locations);
            if (board[n_rows - 1][i] == 'O') BFS(board, n_rows - 1, i, 'A', locations);
        }
        // left & right
        for (int i = 0; i < n_rows; ++i){
            if (board[i][0] == 'O') BFS(board, i, 0, 'A', locations);
            if (board[i][n_cols - 1] == 'O') BFS(board, i, n_cols - 1, 'A', locations);
        }
        // filp center
        for (int i = 1; i < n_rows - 1; ++i){
            for (int j = 1; j < n_cols - 1; ++j){
                if (board[i][j] == 'O') board[i][j] = 'X';
            }
        }
        // flip 'A's back
        for (int i = 0; i < locations.size(); ++i){
            board[locations[i][0]][locations[i][1]] = 'O';
        }
        return;
    }
};

DFS
20ms
class Solution {
private:
    vector<vector<int>> POS = {{-1, 0}, {0, -1}, {1, 0}, {0, 1}};
    int n_rows, n_cols;
    void DFS(vector<vector<char>> &board, int x, int y, char R, vector<vector<int>> &locations){
        if (x < 0 || y < 0 || x >= n_rows || y >= n_cols || board[x][y] != 'O') return;
        board[x][y] = R;
        locations.push_back({x, y});
        for (int i = 0; i < 4; ++i){
            DFS(board, x + POS[i][0], y + POS[i][1], 'A', locations);
        }
        return;
    }
public:
    void solve(vector<vector<char>>& board) {
        if (board.empty()) return;
        n_rows = board.size();
        n_cols = board[0].size();
        if (n_rows <= 2 || n_cols <= 2) return;
        // flip all boarder regions to "A", keep it in a space
        vector<vector<int>> locations;
        // top & bottom
        for (int i = 0; i < n_cols; ++i){
            if (board[0][i] == 'O') DFS(board, 0, i, 'A', locations);
            if (board[n_rows - 1][i] == 'O') DFS(board, n_rows - 1, i, 'A', locations);
        }
        // left & right
        for (int i = 0; i < n_rows; ++i){
            if (board[i][0] == 'O') DFS(board, i, 0, 'A', locations);
            if (board[i][n_cols - 1] == 'O') DFS(board, i, n_cols - 1, 'A', locations);
        }
        // filp center
        for (int i = 1; i < n_rows - 1; ++i){
            for (int j = 1; j < n_cols - 1; ++j){
                if (board[i][j] == 'O') board[i][j] = 'X';
            }
        }
        // flip 'A's back
        for (int i = 0; i < locations.size(); ++i){
            board[locations[i][0]][locations[i][1]] = 'O';
        }
        return;
    }
};
