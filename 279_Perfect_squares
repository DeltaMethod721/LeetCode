BFS
class Solution {
public:
    int numSquares(int n) {
        int count = 0;
        queue<int> q;
        q.push(n);
        while (!q.empty()){
            count++;
            int size = q.size();
            for (int i = 0; i < size; ++i){
                int current = q.front(); q.pop();
                int max = (int)pow(current, 0.5);
                for (int j = 1; j <= max; ++j){
                    if (current - pow(j, 2) == 0) return count;
                    q.push(current - pow(j, 2));
                }
            }
        }
    }
};

DP
class Solution {
public:
    int numSquares(int n) {
        vector<int> dp (n + 1, 0); // representing number of positive perfect square numbers
        for (int i = 1; i <= n; ++i){
            if (pow(i, 0.5) == (int)pow(i, 0.5)){
                dp[i] = 1;
            }else{
                int max = (int)pow(i, 0.5);
                int min_num = i;
                for (int j = 1; j <= max; ++j){
                    if (dp[i - pow(j, 2)] < min_num){
                        min_num = dp[i - pow(j, 2)];
                    }
                    dp[i] = min_num + 1;
                }
            }
            cout << dp[i] << endl;
        }
        return dp[n];
    }
};