/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode* reverseBetween(ListNode* head, int m, int n) {
        if (head == NULL || head->next == NULL) return head;
        if (m == 1){
            ListNode *current = head, *temp;
            int count = 1;
            while (count < n){
                if (current == NULL || current->next == NULL) break;
                temp = head;
                head = current->next;
                current->next = current->next->next;
                head->next = temp;
                count++;
            }
        }else{
            // go to the (m-1)th node
            int count = 2;
            ListNode *current = head;
            while (count < m){
                if (current == NULL) return head;
                current = current->next;
                count++;
            }
            ListNode *insert = current, *temp;
            current = current->next;
            while (count < n){
                temp = insert->next;
                insert->next = current->next;
                current->next = current->next->next;
                insert->next->next = temp;
                count++;
            }
        }
        return head;
    }
};