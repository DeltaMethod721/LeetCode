class Solution {
public:
    int maxRotateFunction(vector<int>& A) {
        if (A.size() == 0) return 0;
        int max_tot = INT_MIN, cur;
        for (int i = 0; i < A.size(); ++i){
            A.insert(A.begin(), A[A.size() - 1]);
            A.pop_back(); cur = 0;
            for (int j = 0; j < A.size(); ++j){
                cur += j * A[j];
            }
            max_tot = max(max_tot, cur);
        }
        return max_tot;
    }
};

class Solution {
public:
    int maxRotateFunction(vector<int>& A) {
        if (A.size() == 0 || A.size() == 1) return 0;
        int max_tot = INT_MIN, cur = 0, tot = 0;
        vector<int> m = A;
        for (int i = 0; i < A.size(); ++i) tot += A[i]; // get sum
        for (int i = 0; i < A.size(); ++i){
            m[i] = tot - A[i]; // get partial sum
            cur += i * A[i]; // initialize cur
        }
        max_tot = cur;
        for (int i = 1; i < A.size(); ++i){
            cur = cur - m[i - 1] + A[i - 1] * (A.size() - 1);
            max_tot = max(max_tot, cur);
        }
        return max_tot;
    }
};