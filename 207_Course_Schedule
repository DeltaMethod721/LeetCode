class Solution {
public:
    bool canFinish(int numCourses, vector<pair<int, int>>& prerequisites) {
        vector<vector<int>> courses(numCourses, vector<int>(numCourses, 0));
        // courses[i][j] means that i is follow-up course of j, if course[i][j] = 1, course[j][i] = -1
        // when a new constraint comes, check:
        //   1. if courses[i][j] and courses[j][i] taken, is it correct?
        //   2. for all the follow up courses of i (courses[k][i] == 1), courses[k][j] must be 1, courses[j][k] must be -1
        //   3. for all the pre courses of j (courses[j][k] == 1), courses[i][k] must be 1, courses[k][i] must be -1
        for (auto a : prerequisites){
            // check 1
            if (courses[a.first][a.second] == -1) return false;
            if (courses[a.second][a.first] == 1) return false;
            courses[a.first][a.second] = 1;
            courses[a.second][a.first] = -1;
            // check 2
            for (int k = 0; k < numCourses; ++k){
                if (courses[k][a.first] == 1 || courses[a.first][k] == -1){
                    if (courses[k][a.second] == -1) return false;
                    if (courses[a.second][k] == 1) return false;
                    courses[k][a.second] = 1;
                    courses[a.second][k] = -1;
                }
            }
            // check 3
            for (int k = 0; k < numCourses; ++k){
                if (courses[a.second][k] == 1 || courses[k][a.second] == -1){
                    if (courses[a.first][k] == -1) return false;
                    if (courses[k][a.first] == 1) return false;
                    courses[a.first][k] = 1;
                    courses[k][a.first] = -1;
                }
            }
        }
        return true;
    }
};

in fact, don't need to check 3

Here, topological sort

class Solution {
public:
    bool canFinish(int numCourses, vector<pair<int, int>>& prerequisites) {
        vector<int> in_degree (numCourses, 0);
        vector<int> T;
        // initialize in_degree
        for (auto a : prerequisites) in_degree[a.first]++;
        // prepare a graph representation
        vector<vector<int>> graph (numCourses);
        for (auto a : prerequisites) graph[a.second].push_back(a.first);
        bool haszero;
        while (T.size() < numCourses){
            haszero = false;
            for (int a = 0; a < in_degree.size(); ++a){
                if (in_degree[a] == 0){
                    haszero = true;
                    T.push_back(a);
                    // search for all out_degrees
                    for (auto b : graph[a]){
                        in_degree[b]--;
                    }
                    in_degree[a]--;
                } 
            }
            if (haszero == false) return false;
        }
        return true;
    }
};