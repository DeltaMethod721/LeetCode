// fact can't be too large number
class Solution {
private:
    int fact(int m){
        // get the factorial of m
        int result = 1;
        for (int i = 1; i <= m; ++i){
            result *= i;
        }
        return result;
    }
public:
    int uniquePaths(int m, int n) {
        return fact(m - 1 + n - 1) / (fact(m - 1) * fact(n - 1));
    }
};

// overflow
class Solution {
public:
    int uniquePaths(int m, int n) {
        int large, small, num = 1, denom = 1;
        if (m > n){
            large = m;
            small = n;
        }else{
            large = n;
            small = m;
        }
        for (int i = 0; i < small; ++i){
            num *= large - i;
        }
        cout << num << endl;
        for (int i = 0; i < small; ++i){
            denom *= i + 1;
        }
        cout << denom << endl;
        return num / denom;
    }
};
