class Solution {
public:
    bool hasGroupsSizeX(vector<int>& deck) {
        unordered_map<int, int> hashmap;
        for (int i = 0; i < deck.size(); ++i){
            if (hashmap.find(deck[i]) == hashmap.end())
                // insert it 
                hashmap.insert(make_pair(deck[i], 1));
            else
                hashmap[deck[i]]++;
        }
        int rep = hashmap.begin()->second;
        for (auto it = hashmap.begin(); it != hashmap.end(); ++it){
            rep = min(rep, it->second);
        }
        if (rep == 1) return false;
        bool result = false;
        for (int i = 2; i <= rep; ++i){
            if (rep % i == 0){
                bool temp_result = true;
                for (auto it = hashmap.begin(); it != hashmap.end(); ++it){
                    temp_result = temp_result && (it->second % i == 0);
                }
                result = result || temp_result;
            }
        }
        return result;
    }
};